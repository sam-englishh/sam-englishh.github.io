{
  "hash": "0f09957007dcda108ef007c21cdc8a42",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Netflix Title Analysis\"\nauthor: \"Sam English\"\ndate: 10/02/2024\n---\n\n\nThis is my second project using R to visualize data. The focus in this project is to use piping to organize data so it is easier to understand and present. I focused on data involving Netflix titles and made three visualizations. Firstly, I found the most common words in titles of Netflix Movies and TV Shows, removing filler words like 'the' and 'and'. Next, I compared the number of titles on Netflix that were movies or TV Shows, and their release dates. Finally, I displayed the percent of titles that contain a digit anywhere in the title, start with \"the\" or have the word \"the\" anywhere and showed this information on a bar graph.   \n\n\nThis analysis uses data from the tidy tuesday data source on titles of Netflix movies and TV show. [Netflix Titles]\n<https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-04-20/readme.md>\n\nthe original data can be found on Kaggle at <https://www.kaggle.com/datasets/shivamb/netflix-shows>. It was published by Bansal. The data is titled \"Netflix Movies and TV Shows\", and consists of listings of all the movies and tv shows available on Netflix, along with details such as - cast, directors, ratings, release year, duration, etc.\n\n\n\nHere is the entire dataset that I used. \n\n::: {.cell}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load('2021-04-20')\ntuesdata <- tidytuesdayR::tt_load(2021, week = 17)\nnetflix <- tuesdata$netflix\nnetflix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,787 × 12\n   show_id type    title director   cast  country date_added release_year rating\n   <chr>   <chr>   <chr> <chr>      <chr> <chr>   <chr>             <dbl> <chr> \n 1 s1      TV Show 3%    <NA>       João… Brazil  August 14…         2020 TV-MA \n 2 s2      Movie   7:19  Jorge Mic… Demi… Mexico  December …         2016 TV-MA \n 3 s3      Movie   23:59 Gilbert C… Tedd… Singap… December …         2011 R     \n 4 s4      Movie   9     Shane Ack… Elij… United… November …         2009 PG-13 \n 5 s5      Movie   21    Robert Lu… Jim … United… January 1…         2008 PG-13 \n 6 s6      TV Show 46    Serdar Ak… Erda… Turkey  July 1, 2…         2016 TV-MA \n 7 s7      Movie   122   Yasir Al … Amin… Egypt   June 1, 2…         2019 TV-MA \n 8 s8      Movie   187   Kevin Rey… Samu… United… November …         1997 R     \n 9 s9      Movie   706   Shravan K… Divy… India   April 1, …         2019 TV-14 \n10 s10     Movie   1920  Vikram Bh… Rajn… India   December …         2008 TV-MA \n# ℹ 7,777 more rows\n# ℹ 3 more variables: duration <chr>, listed_in <chr>, description <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidytext)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstop_words <- c(\"the\", \"a\", \"of\", \"and\", \"in\", \"on\", \"with\", \"is\", \"to\", \"for\", \"at\", \"s\", \"2\", \"i\")\n\ncommon_words <- netflix |>\n  mutate(title = str_to_lower(title),                               \n         title = str_replace_all(title, \"\\\\p{P}\", \" \")) |>     \n  rowwise() |>     #Process each row of the dataset separately, allowing for operations like splitting words in each title.                                                  \n  mutate(words = str_split(title, \"\\\\s+\")) |> # split words separated by spaces             \n  unnest(words) |>      # Each word from a title becomes its own row.             \n  filter(!words %in% stop_words, words != \"\") |>                                            \n  group_by(words) |>                                      \n  mutate(n = n()) |>                                            \n  arrange(desc(n)) |>                                          \n  distinct(words, n, .keep_all = TRUE) |>\n  select(words, n) |>\n  head(10)\n\ncommon_words\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n# Groups:   words [10]\n   words         n\n   <chr>     <int>\n 1 love        152\n 2 my          127\n 3 you          81\n 4 man          79\n 5 christmas    78\n 6 world        69\n 7 story        67\n 8 life         66\n 9 movie        60\n10 little       58\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(common_words, aes(x = reorder(words, -n),  y = n)) + \n  geom_bar(stat = \"identity\", fill = \"pink\") +\n  labs(title = \"Most Common Words in Netflix Titles\", \n       x = \"Words\", \n       y = \"Frequency\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n```\n\n::: {.cell-output-display}\n![](MiniProject2_files/figure-html/unnamed-chunk-4-1.png){fig-alt='Bar chart showing the most common words in Netflix titles, with ‘love’ being the most frequent, followed by ‘my’ and ‘you.’ Frequencies decrease for words like ‘man,’ ‘Christmas,’ ‘world,’ and others.' width=672}\n:::\n:::\n\nThis plot shows the most common occurring words in Netflix titles if you remove stock words such as \"the\", \"and\" and \"of\". Some obvious 'buzzwords' include \"love, \"story\" and \"movie\". Some key words that surprised me include \"Christmas\", but it also makes sense as Christmas movies, much like songs, are very popular at that specific time of year. \"Man\" is also an interesting observation considering there is no appearance of \"woman\" in the top 10 words. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetflix_by_year <- netflix |>\n  group_by(release_year, type) |>\n  summarise(count = n())  \n\nnetflix_by_year\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 118 × 3\n# Groups:   release_year [73]\n   release_year type    count\n          <dbl> <chr>   <int>\n 1         1925 TV Show     1\n 2         1942 Movie       2\n 3         1943 Movie       3\n 4         1944 Movie       3\n 5         1945 Movie       3\n 6         1946 Movie       1\n 7         1946 TV Show     1\n 8         1947 Movie       1\n 9         1954 Movie       2\n10         1955 Movie       3\n# ℹ 108 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(netflix_by_year, aes(x = release_year, y = count, color = type)) +\n  geom_line() +\n  labs(title = \"Number of Movies and TV Shows Released by Year on Netflix\", \n       x = \"Release Year\", \n       y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](MiniProject2_files/figure-html/unnamed-chunk-5-1.png){fig-alt='Line chart showing the number of movies and TV shows released by year on Netflix. The red line represents movies, peaking around 2019, and the blue line represents TV shows, with a similar peak slightly after movies. Both lines show minimal activity before 2000, followed by a sharp increase post-2010.' width=672}\n:::\n:::\n\nThis graph shows the number of movies and TV shows and their corresponding release years. It shows the increase in number of movies as the year heads towards present day. It also demonstrates the disparity of movies vs. TV shows. And that there has always been more movies than TT shows on Netflix. An interesting observation is in 2021, where there is growth in the number of TV shows released in this year, and a decline in movies. It is also cool to note that the earliest title on Netflix was released in 1925, and it is a TV show!! \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_titles <- nrow(netflix)\n\nprop_titles <- netflix |>\n  mutate(title = str_to_lower(title)) |> \n  summarise(\n    count_numbers = sum(str_detect(title, \"\\\\d\")),  \n    count_the_anywhere = sum(str_detect(title, \"the\")),  \n    count_the_start = sum(str_detect(title, \"^the\"))) |>\n  mutate(\n    The_Anywhere = count_the_anywhere / total_titles, \n    Start_With_The = count_the_start / total_titles, \n    Digit_Anywhere = count_numbers / total_titles  \n  )\n\nprop_titles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  count_numbers count_the_anywhere count_the_start The_Anywhere Start_With_The\n          <int>              <int>           <int>        <dbl>          <dbl>\n1           426               1898             997        0.244          0.128\n# ℹ 1 more variable: Digit_Anywhere <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nprop_titles_long <- prop_titles |>\n  pivot_longer(\n    cols = c(The_Anywhere, Start_With_The, Digit_Anywhere),  \n    names_to = \"condition\",              \n    values_to = \"proportion\"             \n  ) |>\n  select(condition, proportion)\n\nprop_titles_long \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  condition      proportion\n  <chr>               <dbl>\n1 The_Anywhere       0.244 \n2 Start_With_The     0.128 \n3 Digit_Anywhere     0.0547\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(prop_titles_long, aes(x = condition, y = proportion, fill = condition)) +\n  geom_bar(stat = \"identity\") +\n  labs(\n    title = \"Proportions of Words in Netflix Titles\",\n    x = \"Title Condition\",\n    y = \"Proportion\",\n    fill = \"Condition\"\n  ) +\n  scale_y_continuous(labels = scales::percent) +\n  scale_x_discrete(labels = c(\n    The_Anywhere = '\"The\" anywhere',\n    Start_With_The = 'Start with \"The\"',\n    Digit_Anywhere = '\"Digit\" anywhere')) +\n  scale_fill_discrete(labels = c(\n    The_Anywhere = '\"The\" anywhere',\n    Start_With_The = 'Start with \"The\"',\n    Digit_Anywhere = '\"Digit\" anywhere')) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](MiniProject2_files/figure-html/unnamed-chunk-6-1.png){fig-alt='Bar chart titled “Proportions of Words in Netflix Titles” showing three conditions: “Digit” anywhere (red, around 5%), titles starting with “The” (green, around 15%), and “The” appearing anywhere (blue, around 25%). The proportions increase from left to right.' width=672}\n:::\n:::\n\nThis plot shows the proportions of titles that start with \"the\", contain \"the\" or contain any digit. Almost exactly twice as many titles contain \"the\" anywhere in the title than titles that start with \"the\". Almost a quarter of Netflix titles contain the word \"the\". Far fewer titles contain digits, at only 5.5%. I expected this proportion to be higher.    \n\n\n",
    "supporting": [
      "MiniProject2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}